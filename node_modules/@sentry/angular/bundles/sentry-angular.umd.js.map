{"version":3,"file":"sentry-angular.umd.js","sources":["../../src/constants.ts","../../src/flags.ts","../../src/sdk.ts","../../src/zone.ts","../../src/errorhandler.ts","../../src/tracing.ts","../../src/sentry-angular.ts"],"sourcesContent":["export const ANGULAR_ROUTING_OP = 'ui.angular.routing';\n\nexport const ANGULAR_INIT_OP = 'ui.angular.init';\n\nexport const ANGULAR_OP = 'ui.angular';\n\n/**\n * Minimum Angular version this SDK supports\n */\nexport const ANGULAR_MINIMUM_VERSION = 10;\n","/*\n * This file defines flags and constants that can be modified during compile time in order to facilitate tree shaking\n * for users.\n *\n * We define \"magic strings\" like `__SENTRY_DEBUG__` that may get replaced with actual values during our, or the user's\n * build process. Take care when introducing new flags - they must not throw if they are not replaced. See the Debug\n * Build Flags section in CONTRIBUTING.md.\n */\n\ndeclare const __SENTRY_DEBUG__: boolean;\n\n/** Flag that is true for debug builds, false otherwise. */\nexport const IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' ? true : __SENTRY_DEBUG__;\n","import { VERSION } from '@angular/core';\nimport { BrowserOptions, init as browserInit, SDK_VERSION, setContext } from '@sentry/browser';\nimport { logger } from '@sentry/utils';\n\nimport { ANGULAR_MINIMUM_VERSION } from './constants';\nimport { IS_DEBUG_BUILD } from './flags';\n\n/**\n * Inits the Angular SDK\n */\nexport function init(options: BrowserOptions): void {\n  options._metadata = options._metadata || {};\n  options._metadata.sdk = {\n    name: 'sentry.javascript.angular',\n    packages: [\n      {\n        name: 'npm:@sentry/angular',\n        version: SDK_VERSION,\n      },\n    ],\n    version: SDK_VERSION,\n  };\n\n  checkAndSetAngularVersion();\n  browserInit(options);\n}\n\nfunction checkAndSetAngularVersion(): void {\n  const angularVersion = VERSION && VERSION.major ? parseInt(VERSION.major, 10) : undefined;\n\n  if (angularVersion) {\n    if (angularVersion < ANGULAR_MINIMUM_VERSION) {\n      IS_DEBUG_BUILD &&\n        logger.warn(\n          `The Sentry SDK does not officially support Angular ${angularVersion}.`,\n          `This version of the Sentry SDK supports Angular ${ANGULAR_MINIMUM_VERSION} and above.`,\n          'Please consider upgrading your Angular version or downgrading the Sentry SDK.',\n        );\n    }\n    setContext('angular', { version: angularVersion });\n  }\n}\n","// That's the `global.Zone` exposed when the `zone.js` package is used.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Zone: any;\n\n// There're 2 types of Angular applications:\n// 1) zone-full (by default)\n// 2) zone-less\n// The developer can avoid importing the `zone.js` package and tells Angular that\n// he is responsible for running the change detection by himself. This is done by\n// \"nooping\" the zone through `CompilerOptions` when bootstrapping the root module.\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst isNgZoneEnabled = typeof Zone !== 'undefined' && !!Zone.current;\n\n/**\n * The function that does the same job as `NgZone.runOutsideAngular`.\n */\nexport function runOutsideAngular<T>(callback: () => T): T {\n  // The `Zone.root.run` basically will run the `callback` in the most parent zone.\n  // Any asynchronous API used inside the `callback` won't catch Angular's zone\n  // since `Zone.current` will reference `Zone.root`.\n  // The Angular's zone is forked from the `Zone.root`. In this case, `zone.js` won't\n  // trigger change detection, and `ApplicationRef.tick()` will not be run.\n  // Caretaker note: we're using `Zone.root` except `NgZone.runOutsideAngular` since this\n  // will require injecting the `NgZone` facade. That will create a breaking change for\n  // projects already using the `@sentry/angular`.\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return isNgZoneEnabled ? Zone.root.run(callback) : callback();\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler as AngularErrorHandler, Inject, Injectable } from '@angular/core';\nimport * as Sentry from '@sentry/browser';\nimport { captureException } from '@sentry/browser';\nimport { addExceptionMechanism } from '@sentry/utils';\n\nimport { runOutsideAngular } from './zone';\n\n/**\n * Options used to configure the behavior of the Angular ErrorHandler.\n */\nexport interface ErrorHandlerOptions {\n  logErrors?: boolean;\n  showDialog?: boolean;\n  dialogOptions?: Sentry.ReportDialogOptions;\n  /**\n   * Custom implementation of error extraction from the raw value captured by the Angular.\n   * @param error Value captured by Angular's ErrorHandler provider\n   * @param defaultExtractor Default implementation that can be used as the fallback in case of custom implementation\n   */\n  extractor?(error: unknown, defaultExtractor: (error: unknown) => unknown): unknown;\n}\n\n/**\n * Implementation of Angular's ErrorHandler provider that can be used as a drop-in replacement for the stock one.\n */\n@Injectable({ providedIn: 'root' })\nclass SentryErrorHandler implements AngularErrorHandler {\n  protected readonly _options: ErrorHandlerOptions;\n\n  public constructor(@Inject('errorHandlerOptions') options?: ErrorHandlerOptions) {\n    this._options = {\n      logErrors: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Method called for every value captured through the ErrorHandler\n   */\n  public handleError(error: unknown): void {\n    const extractedError = this._extractError(error) || 'Handled unknown error';\n\n    // Capture handled exception and send it to Sentry.\n    const eventId = runOutsideAngular(() =>\n      captureException(extractedError, scope => {\n        scope.addEventProcessor(event => {\n          addExceptionMechanism(event, {\n            type: 'angular',\n            handled: false,\n          });\n\n          return event;\n        });\n\n        return scope;\n      }),\n    );\n\n    // When in development mode, log the error to console for immediate feedback.\n    if (this._options.logErrors) {\n      // eslint-disable-next-line no-console\n      console.error(extractedError);\n    }\n\n    // Optionally show user dialog to provide details on what happened.\n    if (this._options.showDialog) {\n      Sentry.showReportDialog({ ...this._options.dialogOptions, eventId });\n    }\n  }\n\n  /**\n   * Used to pull a desired value that will be used to capture an event out of the raw value captured by ErrorHandler.\n   */\n  protected _extractError(error: unknown): unknown {\n    // Allow custom overrides of extracting function\n    if (this._options.extractor) {\n      const defaultExtractor = this._defaultExtractor.bind(this);\n      return this._options.extractor(error, defaultExtractor);\n    }\n\n    return this._defaultExtractor(error);\n  }\n\n  /**\n   * Default implementation of error extraction that handles default error wrapping, HTTP responses, ErrorEvent and few other known cases.\n   */\n  protected _defaultExtractor(errorCandidate: unknown): unknown {\n    let error = errorCandidate;\n\n    // Try to unwrap zone.js error.\n    // https://github.com/angular/angular/blob/master/packages/core/src/util/errors.ts\n    if (error && (error as { ngOriginalError: Error }).ngOriginalError) {\n      error = (error as { ngOriginalError: Error }).ngOriginalError;\n    }\n\n    // We can handle messages and Error objects directly.\n    if (typeof error === 'string' || error instanceof Error) {\n      return error;\n    }\n\n    // If it's http module error, extract as much information from it as we can.\n    if (error instanceof HttpErrorResponse) {\n      // The `error` property of http exception can be either an `Error` object, which we can use directly...\n      if (error.error instanceof Error) {\n        return error.error;\n      }\n\n      // ... or an`ErrorEvent`, which can provide us with the message but no stack...\n      if (error.error instanceof ErrorEvent && error.error.message) {\n        return error.error.message;\n      }\n\n      // ...or the request body itself, which we can use as a message instead.\n      if (typeof error.error === 'string') {\n        return `Server returned code ${error.status} with body \"${error.error}\"`;\n      }\n\n      // If we don't have any detailed information, fallback to the request message itself.\n      return error.message;\n    }\n\n    // Nothing was extracted, fallback to default error message.\n    return null;\n  }\n}\n\n/**\n * Factory function that creates an instance of a preconfigured ErrorHandler provider.\n */\nfunction createErrorHandler(config?: ErrorHandlerOptions): SentryErrorHandler {\n  return new SentryErrorHandler(config);\n}\n\nexport { createErrorHandler, SentryErrorHandler };\n","/* eslint-disable max-lines */\nimport { AfterViewInit, Directive, Injectable, Input, NgModule, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRouteSnapshot, Event, NavigationEnd, NavigationStart, ResolveEnd, Router } from '@angular/router';\nimport { getCurrentHub } from '@sentry/browser';\nimport { Span, Transaction, TransactionContext } from '@sentry/types';\nimport { getGlobalObject, logger, stripUrlQueryAndFragment, timestampWithMs } from '@sentry/utils';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nimport { ANGULAR_INIT_OP, ANGULAR_OP, ANGULAR_ROUTING_OP } from './constants';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { runOutsideAngular } from './zone';\n\nlet instrumentationInitialized: boolean;\nlet stashedStartTransaction: (context: TransactionContext) => Transaction | undefined;\nlet stashedStartTransactionOnLocationChange: boolean;\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Creates routing instrumentation for Angular Router.\n */\nexport function routingInstrumentation(\n  customStartTransaction: (context: TransactionContext) => Transaction | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  instrumentationInitialized = true;\n  stashedStartTransaction = customStartTransaction;\n  stashedStartTransactionOnLocationChange = startTransactionOnLocationChange;\n\n  if (startTransactionOnPageLoad && global && global.location) {\n    customStartTransaction({\n      name: global.location.pathname,\n      op: 'pageload',\n      metadata: { source: 'url' },\n    });\n  }\n}\n\nexport const instrumentAngularRouting = routingInstrumentation;\n\n/**\n * Grabs active transaction off scope\n */\nexport function getActiveTransaction(): Transaction | undefined {\n  const currentHub = getCurrentHub();\n\n  if (currentHub) {\n    const scope = currentHub.getScope();\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Angular's Service responsible for hooking into Angular Router and tracking current navigation process.\n * Creates a new transaction for every route change and measures a duration of routing process.\n */\n@Injectable({ providedIn: 'root' })\nexport class TraceService implements OnDestroy {\n  public navStart$: Observable<Event> = this._router.events.pipe(\n    filter((event): event is NavigationStart => event instanceof NavigationStart),\n    tap(navigationEvent => {\n      if (!instrumentationInitialized) {\n        IS_DEBUG_BUILD &&\n          logger.error('Angular integration has tracing enabled, but Tracing integration is not configured');\n        return;\n      }\n\n      const strippedUrl = stripUrlQueryAndFragment(navigationEvent.url);\n      let activeTransaction = getActiveTransaction();\n\n      if (!activeTransaction && stashedStartTransactionOnLocationChange) {\n        activeTransaction = stashedStartTransaction({\n          name: strippedUrl,\n          op: 'navigation',\n          metadata: { source: 'url' },\n        });\n      }\n\n      if (activeTransaction) {\n        if (this._routingSpan) {\n          this._routingSpan.finish();\n        }\n        this._routingSpan = activeTransaction.startChild({\n          description: `${navigationEvent.url}`,\n          op: ANGULAR_ROUTING_OP,\n          tags: {\n            'routing.instrumentation': '@sentry/angular',\n            url: strippedUrl,\n            ...(navigationEvent.navigationTrigger && {\n              navigationTrigger: navigationEvent.navigationTrigger,\n            }),\n          },\n        });\n      }\n    }),\n  );\n\n  // The ResolveEnd event is fired when the Angular router has resolved the URL and\n  // the parameter<->value mapping. It holds the new resolved router state with\n  // the mapping and the new URL.\n  // Only After this event, the route is activated, meaning that the transaction\n  // can be updated with the parameterized route name before e.g. the route's root\n  // component is initialized. This should be early enough before outgoing requests\n  // are made from the new route, with the exceptions of requests being made during\n  // a navigation.\n  public resEnd$: Observable<Event> = this._router.events.pipe(\n    filter((event): event is ResolveEnd => event instanceof ResolveEnd),\n    tap(event => {\n      const route = getParameterizedRouteFromSnapshot(event.state.root);\n\n      const transaction = getActiveTransaction();\n      // TODO (v8 / #5416): revisit the source condition. Do we want to make the parameterized route the default?\n      if (transaction && transaction.metadata.source === 'url') {\n        transaction.setName(route, 'route');\n      }\n    }),\n  );\n\n  public navEnd$: Observable<Event> = this._router.events.pipe(\n    filter(event => event instanceof NavigationEnd),\n    tap(() => {\n      if (this._routingSpan) {\n        runOutsideAngular(() => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          this._routingSpan!.finish();\n        });\n        this._routingSpan = null;\n      }\n    }),\n  );\n\n  private _routingSpan: Span | null = null;\n\n  private _subscription: Subscription = new Subscription();\n\n  public constructor(private readonly _router: Router) {\n    this._subscription.add(this.navStart$.subscribe());\n    this._subscription.add(this.resEnd$.subscribe());\n    this._subscription.add(this.navEnd$.subscribe());\n  }\n\n  /**\n   * This is used to prevent memory leaks when the root view is created and destroyed multiple times,\n   * since `subscribe` callbacks capture `this` and prevent many resources from being GC'd.\n   */\n  public ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n}\n\nconst UNKNOWN_COMPONENT = 'unknown';\n\n/**\n * A directive that can be used to capture initialization lifecycle of the whole component.\n */\n@Directive({ selector: '[trace]' })\nexport class TraceDirective implements OnInit, AfterViewInit {\n  @Input('trace') public componentName: string = UNKNOWN_COMPONENT;\n\n  private _tracingSpan?: Span;\n\n  /**\n   * Implementation of OnInit lifecycle method\n   * @inheritdoc\n   */\n  public ngOnInit(): void {\n    const activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      this._tracingSpan = activeTransaction.startChild({\n        description: `<${this.componentName}>`,\n        op: ANGULAR_INIT_OP,\n      });\n    }\n  }\n\n  /**\n   * Implementation of AfterViewInit lifecycle method\n   * @inheritdoc\n   */\n  public ngAfterViewInit(): void {\n    if (this._tracingSpan) {\n      this._tracingSpan.finish();\n    }\n  }\n}\n\n/**\n * A module serves as a single compilation unit for the `TraceDirective` and can be re-used by any other module.\n */\n@NgModule({\n  declarations: [TraceDirective],\n  exports: [TraceDirective],\n})\nexport class TraceModule {}\n\n/**\n * Decorator function that can be used to capture initialization lifecycle of the whole component.\n */\nexport function TraceClassDecorator(): ClassDecorator {\n  let tracingSpan: Span;\n\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  return target => {\n    const originalOnInit = target.prototype.ngOnInit;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    target.prototype.ngOnInit = function (...args: any[]): ReturnType<typeof originalOnInit> {\n      const activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        tracingSpan = activeTransaction.startChild({\n          description: `<${target.name}>`,\n          op: ANGULAR_INIT_OP,\n        });\n      }\n      if (originalOnInit) {\n        return originalOnInit.apply(this, args);\n      }\n    };\n\n    const originalAfterViewInit = target.prototype.ngAfterViewInit;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    target.prototype.ngAfterViewInit = function (...args: any[]): ReturnType<typeof originalAfterViewInit> {\n      if (tracingSpan) {\n        tracingSpan.finish();\n      }\n      if (originalAfterViewInit) {\n        return originalAfterViewInit.apply(this, args);\n      }\n    };\n  };\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Decorator function that can be used to capture a single lifecycle methods of the component.\n */\nexport function TraceMethodDecorator(): MethodDecorator {\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/ban-types\n  return (target: Object, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    descriptor.value = function (...args: any[]): ReturnType<typeof originalMethod> {\n      const now = timestampWithMs();\n      const activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        activeTransaction.startChild({\n          description: `<${target.constructor.name}>`,\n          endTimestamp: now,\n          op: `${ANGULAR_OP}.${String(propertyKey)}`,\n          startTimestamp: now,\n        });\n      }\n      if (originalMethod) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return originalMethod.apply(this, args);\n      }\n    };\n    return descriptor;\n  };\n}\n\n/**\n * Takes the parameterized route from a given ActivatedRouteSnapshot and concatenates the snapshot's\n * child route with its parent to produce the complete parameterized URL of the activated route.\n * This happens recursively until the last child (i.e. the end of the URL) is reached.\n *\n * @param route the ActivatedRouteSnapshot of which its path and its child's path is concantenated\n *\n * @returns the concatenated parameterzited route string\n */\nexport function getParameterizedRouteFromSnapshot(route?: ActivatedRouteSnapshot | null): string {\n  const path = route && route.firstChild && route.firstChild.routeConfig && route.firstChild.routeConfig.path;\n  if (!path) {\n    return '/';\n  }\n  return `/${path}${getParameterizedRouteFromSnapshot(route && route.firstChild)}`;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["SDK_VERSION","browserInit","VERSION","logger","setContext","captureException","addExceptionMechanism","Sentry","HttpErrorResponse","Injectable","Inject","getGlobalObject","getCurrentHub","filter","NavigationStart","tap","stripUrlQueryAndFragment","ResolveEnd","NavigationEnd","Subscription","Router","Directive","Input","NgModule","timestampWithMs"],"mappings":"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"}