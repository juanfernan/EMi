{"version":3,"file":"src_app_portal_moduls_customer-service_components_terms_terms_module_ts.js","mappings":";;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEd;AAEzC,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,kDAAS;KACrB;CACF,CAAC;AAMK,IAAM,sBAAsB,GAA5B,MAAM,sBAAsB;;AAAtB,sBAAsB;IAJlC,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,sBAAsB;AAAA;;;;;;;;;;;;;;;;;;;;;;;AChBM;AACM;AACF;AAEA;AAEmB;AAEvB;AAWlC,IAAM,eAAe,GAArB,MAAM,eAAe;;AAAf,eAAe;IAT3B,uDAAQ,CAAC;QACR,OAAO,EAAE;YACP,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,yEAAsB;SACvB;QACD,YAAY,EAAE,CAAC,kDAAS,CAAC;KAC1B,CAAC;GACW,eAAe;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBsB;AAC6B;AACV;AAC+C;AAC1C;AAOnE,IAAM,SAAS,GAAf,MAAM,SAAS;IAMpB,YACU,cAA8B,EAC9B,cAA8B,EAC9B,YAA0B;QAF1B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,iBAAY,GAAZ,YAAY,CAAc;QAElC,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC,sBAAsB,EAAE,+BAA+B,CAAC,CAAC,CAAC;IACnG,CAAC;IAEF,QAAQ;QACN,IAAI,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;QAChD,IAAI,CAAC,OAAO,GAAG,QAAQ,IAAI,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;QACjD,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,YAAY;aACd,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC;aAC7B,SAAS,CACR,MAAM,CAAC,EAAE;YACP,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC;QAChD,CAAC,EACD,KAAK,CAAC,EAAE;YACN,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACT,CAAC;IAED,0BAA0B,CAAC,GAAW;QACpC,MAAM,YAAY,GAAiB;YACjC,YAAY,EAAE;gBACZ,UAAU,EAAE,kBAAkB;gBAC9B,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,GAAG;gBAChB,iBAAiB,EAAE,IAAI;gBACvB,UAAU,EAAE,SAAS;gBACrB,WAAW,EAAE,EAAE;gBACf,WAAW,EAAE,EAAE;gBACf,kBAAkB,EAAE,KAAK;aAC1B;YACD,KAAK,EAAE,qCAAqC;YAC5C,EAAE,EAAE,CAAC;SACN;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,8HAAyB,EAAE,YAAY,CAAC,CAAC;IACtF,CAAC;;;;;;;AAhDU,SAAS;IALrB,wDAAS,CAAC;QACT,QAAQ,EAAE,WAAW;QACrB,kEAAgC;;KAEjC,CAAC;GACW,SAAS;AAAA","sources":["./src/app/portal/moduls/customer-service/components/terms/terms-routing.module.ts","./src/app/portal/moduls/customer-service/components/terms/terms.module.ts","./src/app/portal/moduls/customer-service/components/terms/terms.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TermsPage } from './terms.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TermsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TermsPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TermsPageRoutingModule } from './terms-routing.module';\n\nimport { TermsPage } from './terms.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    TermsPageRoutingModule\n  ],\n  declarations: [TermsPage]\n})\nexport class TermsPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { BsModalRef, BsModalService, ModalOptions } from 'ngx-bootstrap/modal';\nimport { TermsService } from 'src/app/public/services/terms.service';\nimport { InformativeModalComponent } from 'src/app/shared/components/informative-modal/informative-modal.component';\nimport { UrlDataService } from 'src/app/shared/services/url-data-service';\n\n@Component({\n  selector: 'app-terms',\n  templateUrl: './terms.page.html',\n  styleUrls: ['./terms.page.scss'],\n})\nexport class TermsPage implements OnInit {\n\n  htmlString: string\n  tagCode: string;\n  bsModalRef: BsModalRef;\n\n  constructor(\n    private urlDataService: UrlDataService,    \n    private bsModalService: BsModalService,\n    private termsService: TermsService\n  ) {\n    this.urlDataService.setHeaderNavPortal(['Servicios al Cliente', 'TÃ©rminos y condiciones de uso']);\n   }\n\n  ngOnInit() {\n    let roleType = localStorage.getItem(\"roleType\");\n    this.tagCode = roleType != \"2\" ? \"TYCC\" : \"TYCE\";\n    this.getTerms();\n  }\n\n  getTerms() {\n    this.termsService\n      .getLegalContent(this.tagCode)\n      .subscribe(\n        result => {\n          this.htmlString = result.LegalContent.Content;\n        },\n        error => {\n          this.showErrorNotificationModal(error.message);\n        });\n  }\n\n  showErrorNotificationModal(msg: string) {\n    const initialState: ModalOptions = {\n      initialState: {\n        iconHeader: 'alert-circle.svg',\n        subTitle: 'Hubo un problema',\n        description: msg,\n        onlyButtonConfirm: true,\n        textButton: 'Aceptar',\n        textButton1: '',\n        textButton2: '',\n        visibleButtonClose: false,\n      },\n      class: 'modal-dialog-centered modal-rounded',\n      id: 1\n    }\n    this.bsModalRef = this.bsModalService.show(InformativeModalComponent, initialState);\n  }\n\n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}